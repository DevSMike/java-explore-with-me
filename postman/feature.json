{
  "info": {
    "_postman_id": "2b97e6f0-3788-4d80-a80e-88c7d6f32ff2",
    "name": "Test Explore With Me - Subscription",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "25787051"
  },
  "item": [
    {
      "name": "Subscription",
      "item": [
        {
          "name": "Создание подписки, когда инициатор не найден",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.notFound;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"subId\" : \"1\",\r\n    \"initId\" : \"2000\",\r\n    \"isSub\" : \"true\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/subscribe",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "subscribe"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание подписки, когда подписчик не найден",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.notFound;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"subId\" : \"1000\",\r\n    \"initId\" : \"1\",\r\n    \"isSub\" : \"true\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/subscribe",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "subscribe"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание подписки, когда подписчик и инициатор - один человек",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"subId\" : \"1\",\r\n    \"initId\" : \"1\",\r\n    \"isSub\" : \"true\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/subscribe",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "subscribe"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание подписки, когда isSub = false",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"subId\" : \"2\",\r\n    \"initId\" : \"1\",\r\n    \"isSub\" : \"false\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/subscribe",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "subscribe"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание успешной подписки sub id 2 | initiator id 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Подписка должа содержать поля: id, subId, initId, isSub, timestamp\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('subId');\r",
                  "pm.expect(target).to.have.property('initId');\r",
                  "pm.expect(target).to.have.property('isSub');\r",
                  "pm.expect(target).to.have.property('timestamp');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.subId).equal(2, 'SubId должен быть 2');\r",
                  "    pm.expect(target.initId).equal(1, 'InitId должен быть 1');\r",
                  "    pm.expect(target.isSub).equal(true, 'isSub должно быть true')\r",
                  "    pm.expect(target.timestamp).to.not.be.null;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"subId\" : \"2\",\r\n    \"initId\" : \"1\",\r\n    \"isSub\" : \"true\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/subscribe",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "subscribe"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание подписки subId = 2 | initId = 3",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Подписка должа содержать поля: id, subId, initId, isSub, timestamp\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('subId');\r",
                  "pm.expect(target).to.have.property('initId');\r",
                  "pm.expect(target).to.have.property('isSub');\r",
                  "pm.expect(target).to.have.property('timestamp');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.subId).equal(2, 'SubId должен быть 2');\r",
                  "    pm.expect(target.initId).equal(3, 'InitId должен быть 1');\r",
                  "    pm.expect(target.isSub).equal(true, 'isSub должно быть true')\r",
                  "    pm.expect(target.timestamp).to.not.be.null;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"subId\" : \"2\",\r\n    \"initId\" : \"3\",\r\n    \"isSub\" : \"true\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/subscribe",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "subscribe"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание отписки subId = 2 | initId = 1 & isSub = true",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"subId\" : \"2\",\r\n    \"initId\" : \"1\",\r\n    \"isSub\" : \"true\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/unsubscribe",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "unsubscribe"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание успешной отписки subId = 2 | initId = 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Подписка должа содержать поля: id, subId, initId, isSub, timestamp\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('subId');\r",
                  "pm.expect(target).to.have.property('initId');\r",
                  "pm.expect(target).to.have.property('isSub');\r",
                  "pm.expect(target).to.have.property('timestamp');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.subId).equal(2, 'SubId должен быть 2');\r",
                  "    pm.expect(target.initId).equal(1, 'InitId должен быть 1');\r",
                  "    pm.expect(target.isSub).equal(false, 'isSub должно быть false')\r",
                  "    pm.expect(target.timestamp).to.not.be.null;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"subId\" : \"2\",\r\n    \"initId\" : \"1\",\r\n    \"isSub\" : \"false\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/unsubscribe",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "unsubscribe"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание отписки, когда подписки не существует",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"subId\" : \"2\",\r\n    \"initId\" : \"1\",\r\n    \"isSub\" : \"false\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/unsubscribe",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "unsubscribe"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Поиск подписочных событий по id инициатора с параметрами по умолчанию",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test(\"Событие должно иметь инициатора с полем initId\", function () {\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.initiator.id).equal(3, 'InitId должен быть 3');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/search/initiator?subId=2&initId=3",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "search",
                "initiator"
              ],
              "query": [
                {
                  "key": "subId",
                  "value": "2"
                },
                {
                  "key": "initId",
                  "value": "3"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Поиск подписочных событий с не заданным initId",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/search/initiator?subId=2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "search",
                "initiator"
              ],
              "query": [
                {
                  "key": "subId",
                  "value": "2"
                },
                {
                  "key": "initId",
                  "value": "3",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Поиск подписочных событий без заданного subId",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/search/initiator?initId=3",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "search",
                "initiator"
              ],
              "query": [
                {
                  "key": "subId",
                  "value": "2",
                  "disabled": true
                },
                {
                  "key": "initId",
                  "value": "3"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Поиск всех подписочных событий",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test(\"Событие должно иметь инициатора с полем initId\", function () {\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.initiator.id).equal(3, 'InitId должен быть 3');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/search/all?subId=2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "search",
                "all"
              ],
              "query": [
                {
                  "key": "subId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Поиск всех подписочных событий, проверка size и from",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test(\"Размер возвращаемого списка должен быть 0\", function () {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.an('array'); \r",
                  "    pm.expect(responseJson).to.have.length(0); \r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/search/all?subId=2&size=1&from=1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "search",
                "all"
              ],
              "query": [
                {
                  "key": "subId",
                  "value": "2"
                },
                {
                  "key": "size",
                  "value": "1"
                },
                {
                  "key": "from",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Проверка всех подписочных событий без subId",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/search/all",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "search",
                "all"
              ],
              "query": [
                {
                  "key": "subId",
                  "value": "2",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ]
}